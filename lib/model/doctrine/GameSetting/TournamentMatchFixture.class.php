<?php

/**
 * TournamentMatchFixture
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    mu-TMS
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class TournamentMatchFixture extends PluginTournamentMatchFixture
{
	public function makeMatchFixtureCode ($_tournamentMatchNumber)
	{
		$_flag = true;    
			$this->tournament_match_fixture_full_number = $_tournamentMatchNumber.'-'.SystemCore::processCodeGeneratorInitialNumber($this->id).'/'.date('y', time()); 
			$this->tournament_match_fixture_number = $_tournamentMatchNumber.'-'.SystemCore::processCodeGeneratorInitialNumber($this->id); 
			$this->save();
			
		return $_flag;
	}
	
	public function checkInitiated ()
	{
		return (($this->approval_status ==TournamentCore::$_INITIATED) && ($this->status ==TournamentCore::$_INITIATED)) ? true:false;
	}
	public function makePending ()
	{
		$_flag = true;   
			$this->approval_status = trim(TournamentCore::$_PENDING);   
			$this->status = trim(TournamentCore::$_PENDING); 
			$this->save();
			
		return $_flag;
	}
	public function makeActivation ()
	{
		$_flag = true;    
		//if($this->pendingTeamGroup) { 
			$this->approval_status = trim(TournamentCore::$_ACTIVE); 
			$this->status = trim(TournamentCore::$_ACTIVE); 
			$this->save();
		//}
		return $_flag;
	}
	
	public function makeApproval ()
	{
		$_flag = true;   
		$_effectiveDate = date('m/d/Y', time());  
		$this->active_flag = true; 
		$this->approval_status = trim(TournamentCore::$_APPROVED); 
		$this->status = trim(TournamentCore::$_ACTIVE); 
		$this->effective_date = trim($_effectiveDate);  
		$this->save();
		return $_flag;
	}
	public function makeProcessRevertion ()
	{
		$_flag = true;       
		$this->status = trim(TournamentCore::$_ACTIVE); 
		$this->effective_date = NULL;  
		$this->save();
		return $_flag;
	}
	public function makeCompletion ()
	{
		$_flag = true;   
		$_endDate = date('m/d/Y', time());  
		$this->active_flag = true;  
		$this->approval_status = trim(TournamentCore::$_APPROVED); 
		$this->status = trim(TournamentCore::$_COMPLETED);  
		$this->effective_date = $this->effective_date ? $this->effective_date:$_endDate;  
		$this->save();
		return $_flag;
	}
	public function makeFinalization ()
	{
		$_flag = true;   
		$_endDate = date('m/d/Y', time());  
		$this->active_flag = false;  
		$this->complete_flag = true;  
		$this->approval_status = trim(TournamentCore::$_COMPLETED); 
		$this->status = trim(TournamentCore::$_COMPLETED);  
		$this->end_date = $_endDate;  
		$this->save();
		return $_flag;
	}
}
