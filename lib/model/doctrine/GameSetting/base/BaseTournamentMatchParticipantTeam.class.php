<?php

/**
 * BaseTournamentMatchParticipantTeam
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $token_id
 * @property integer $tournament_match_fixture_id
 * @property string $tournament_match_fixture_token_id
 * @property integer $group_participant_team_id
 * @property string $group_participant_team_token_id
 * @property string $effective_date
 * @property boolean $qualified_flag
 * @property integer $qualification_status
 * @property boolean $confirm_flag
 * @property boolean $active_flag
 * @property integer $approval_status
 * @property integer $status
 * @property clob $description
 * @property string $type
 * @property string $match_venue
 * @property string $match_date
 * @property string $match_time
 * @property integer $opponent_group_participant_team_id
 * @property string $opponent_group_participant_team_token_id
 * @property TournamentGroupParticipantTeam $TournamentGroupParticipantTeam
 * @property TournamentMatchFixture $TournamentMatchFixture
 * @property Doctrine_Collection $tournamentMatchParticipantTeamMemberParticipants
 * 
 * @package    symfony
 * @subpackage model
 * @author     John Haftom
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTournamentMatchParticipantTeam extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('mutms_tbl_tournament_match_participant_team');
        $this->hasColumn('token_id', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('tournament_match_fixture_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('tournament_match_fixture_token_id', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('group_participant_team_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('group_participant_team_token_id', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('effective_date', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('qualified_flag', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('qualification_status', 'integer', null, array(
             'type' => 'integer',
             'default' => 1,
             ));
        $this->hasColumn('confirm_flag', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('active_flag', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('approval_status', 'integer', null, array(
             'type' => 'integer',
             'default' => 1,
             ));
        $this->hasColumn('status', 'integer', null, array(
             'type' => 'integer',
             'default' => 1,
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('type', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('match_venue', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('match_date', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('match_time', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('opponent_group_participant_team_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('opponent_group_participant_team_token_id', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));

        $this->setSubClasses(array(
             'MultipleParticipantTeam' => 
             array(
              'type' => 1,
             ),
             'PairParticipantTeam' => 
             array(
              'type' => 2,
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('TournamentGroupParticipantTeam', array(
             'local' => 'group_participant_team_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('TournamentMatchFixture', array(
             'local' => 'tournament_match_fixture_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('TournamentMatchTeamMemberParticipant as tournamentMatchParticipantTeamMemberParticipants', array(
             'local' => 'id',
             'foreign' => 'tournament_match_participant_team_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}