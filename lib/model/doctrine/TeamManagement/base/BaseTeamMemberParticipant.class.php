<?php

/**
 * BaseTeamMemberParticipant
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $token_id
 * @property integer $team_id
 * @property string $team_token_id
 * @property integer $person_id
 * @property string $person_token_id
 * @property integer $gender_category_id
 * @property string $member_full_name
 * @property integer $member_role_id
 * @property integer $member_relation_id
 * @property integer $member_number
 * @property boolean $confirmed_flag
 * @property boolean $grouped_flag
 * @property boolean $active_flag
 * @property integer $grouped_status
 * @property integer $status
 * @property clob $description
 * @property Team $Team
 * @property Person $Person
 * @property Doctrine_Collection $teamMemberParticipantRoles
 * @property Doctrine_Collection $teamMemberParticipantTournamentMatchParticipants
 * 
 * @package    symfony
 * @subpackage model
 * @author     Mekonen Berhane
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTeamMemberParticipant extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('mutms_tbl_team_member_participant');
        $this->hasColumn('token_id', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('team_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('team_token_id', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('person_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('person_token_id', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('gender_category_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('member_full_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('member_role_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('member_relation_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('member_number', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('confirmed_flag', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('grouped_flag', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('active_flag', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('grouped_status', 'integer', null, array(
             'type' => 'integer',
             'default' => 1,
             ));
        $this->hasColumn('status', 'integer', null, array(
             'type' => 'integer',
             'default' => 1,
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Team', array(
             'local' => 'team_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Person', array(
             'local' => 'person_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('TeamMemberParticipantRole as teamMemberParticipantRoles', array(
             'local' => 'id',
             'foreign' => 'team_member_participant_id'));

        $this->hasMany('TournamentMatchTeamMemberParticipant as teamMemberParticipantTournamentMatchParticipants', array(
             'local' => 'id',
             'foreign' => 'participant_team_member_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}