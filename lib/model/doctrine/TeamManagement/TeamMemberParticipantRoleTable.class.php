<?php

/**
 * TeamMemberParticipantRoleTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TeamMemberParticipantRoleTable extends PluginTeamMemberParticipantRoleTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object TeamMemberParticipantRoleTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TeamMemberParticipantRole');
    }
   //
	public static function processNew ( $_orgID, $_orgTokenID, $_participantID, $_participantTokenID, $_memberSportGameID, $_memberSportGameTokenID, $_participantName, $_sportGameName, $_memberRole, $_memberStatus, $_description, $_userID, $_userTokenID  )
	{
		 $_flag = true;
				
			$_participantRole = self::processSave ( $_participantID, $_participantTokenID, $_memberSportGameID, $_memberSportGameTokenID, $_participantName, $_sportGameName, $_memberRole, $_memberStatus, $_description  );
		
		return $_participantRole;
	}
	//
	public static function processCreate ( )
	{
		
	} 
	public static function processSave ( $_participantID, $_participantTokenID, $_memberSportGameID, $_memberSportGameTokenID, $_participantName, $_sportGameName, $_memberRole, $_memberStatus, $_description )
	{
		//try {
			//if(!$_orgID || !$_name) return false;
    	
			$_token = trim($_participantID).trim($_memberSportGameTokenID).trim($_participantTokenID).trim($_memberSportGameID).rand('11111', '99999'); 
			$_startDate = date('m/d/Y', time());
			$_nw = new TeamMemberParticipantRole (); 
			$_nw->token_id = sha1(md5(trim($_token))); 
			$_nw->team_game_participation_id = trim($_memberSportGameID); 
			$_nw->team_game_participation_token_id = sha1(md5(trim($_memberSportGameTokenID))); 
			$_nw->team_member_participant_id = trim($_participantID); 
			$_nw->team_member_participant_token_id = sha1(md5(trim($_participantTokenID)));  
			$_nw->member_role_id = trim($_memberRole); 
			$_nw->active_flag = true;  
			$_nw->status = $_memberStatus ? $_memberStatus:trim(PartyCore::$_ACTIVE);   
			$_nw->description = SystemCore::processDescription ( (trim($_participantName).' participating in '.trim($_sportGameName)), trim($_description) );  
			$_nw->save(); 
			
			return $_nw; 
		//} catch ( Exception $e) {
	    //  return false; 
		//}
	} 
	public static function processEdit ( )
	{
		
	} 
	//
	public static function processUpdate ( )
	{
		   
	} 
	//
	public static function processDelete( ) 
   {	
		 
	}
	//
	public static function appendPartialQueryFields ( ) 
	{		
		 
	}
	//
	public static function appendCandidateQueryFields ( ) 
	{		
		 
	}
	public static function appendQueryFields ( ) 
	{		
		 $_queryFileds = "tmMbrPrtRol.id, tmMbrPrtRol.active_flag,
			
								tmMbrPrt.id, tmMbrPrt.member_full_name as memberFullName, tmMbrPrt.member_role_id as memberRoleID ,
		 
								sprtGmPrtn.id, sprtGmPrtn.event_type as eventType, sprtGmPrtn.player_mode as matchPlayerMode, sprtGmPrtn.gender_category_id as genderCategoryID, sprtGmPrtn.active_flag as activeFlag,
								prtTm.id as teamID, prtTm.token_id as teamTokenID, prtTm.team_name as partcipantTeamName, prtTm.alias as partcipantTeamAlias,
								sprtGm.id as sportGameID, sprtGm.token_id as sportGameTokenID, sprtGm.name as sportGameName, sprtGm.alias as sportGameAlias, sprtGm.distance_type as sportGameTypeID,
								gmCat.category_name as gameCategoryName, gmCat.alias as gameCategoryAlias,
								trnmt.id as tournamentID, trnmt.token_id as tournamentTokenID, trnmt.name as tournamentName, trnmt.id as tournamentAlias,
								prsn.id as personID, prsn.name as memberName, prsn.middle_name as memberMiddleName, prsn.last_name as memberLastName, prsn.full_name as memberFullName,
		";	
		return $_queryFileds;
	}
	//
  // process list selection function 
   public static function processSelection ( $_tournamentID=null, $_teamID=null, $_teamTokenID=null, $_participantID=null, $_sportGameID=null, $_keyword=null, $_offset=0, $_limit=10 ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("TeamMemberParticipantRole tmMbrPrtRol") 
				->innerJoin("tmMbrPrtRol.TeamGameParticipation sprtGmPrtn on tmMbrPrtRol.team_game_participation_id = sprtGmPrtn.id ")  
				->innerJoin("tmMbrPrtRol.TeamMemberParticipant tmMbrPrt on tmMbrPrtRol.team_member_participant_id = tmMbrPrt.id ")  
				->innerJoin("tmMbrPrt.Team prtTm on tmMbrPrt.team_id = prtTm.id ")   
				->innerJoin("sprtGmPrtn.GameCategory gmCat on sprtGmPrtn.sport_game_category_id = gmCat.id ")  
				->innerJoin("sprtGmPrtn.SportGame sprtGm on sprtGmPrtn.sport_game_id = sprtGm.id ")  
				->innerJoin("prtTm.Tournament trnmt on prtTm.tournament_id = trnmt.id ")  
				->innerJoin("tmMbrPrt.Person prsn on tmMbrPrt.person_id = prsn.id ")  
				->innerJoin("prtTm.Organization org on prtTm.org_id = org.id ")   
				->offset($_offset)
				->limit($_limit) 
				->orderBy("tmMbrPrt.id ASC")
				->where("tmMbrPrt.id IS NOT NULL");
				//if(!is_null($_orgID)) $_qry = $_qry->addWhere("prtTm.org_id = ?", $_orgID);
				if(!is_null($_teamID)) $_qry = $_qry->addWhere("tmMbrPrt.team_id = ? AND tmMbrPrt.team_token_id = ? ", array($_teamID, $_teamTokenID));
				if(!is_null($_participantID)) $_qry = $_qry->addWhere("prsn.id = ?", $_participantID);   
				if(!is_null($_sportGameID)) $_qry = $_qry->addWhere("sprtGm.id = ?", $_sportGameID);   
				if(!is_null($_tournamentID)) $_qry = $_qry->addWhere("trnmt.id = ?", $_tournamentID);   
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("prsn.full_name LIKE ? OR gmCat.category_name LIKE ? OR sprtGmPrtn.id LIKE ? OR sprtGmPrtn.description LIKE ?", array( $_keyword, $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	
	// process list selection function 
   public static function processAll ( $_orgID=null, $_tournamentID=null, $_teamID=null, $_teamTokenID=null, $_gameTypeID=null, $_keyword=null, $_exclusion=null ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("TeamMemberParticipantRole tmMbrPrt") 
				->innerJoin("tmMbrPrt.Team prtTm on tmMbrPrt.team_id = prtTm.id ")  
				->innerJoin("tmMbrPrt.TeamGameParticipation sprtGmPrtn on tmMbrPrt.sport_game_id = sprtGmPrtn.id ")  
				->innerJoin("sprtGmPrtn.GameCategory gmCat on sprtGmPrtn.sport_game_category_id = gmCat.id ")  
				->innerJoin("sprtGmPrtn.SportGame sprtGm on sprtGmPrtn.sport_game_id = sprtGm.id ")  
				->innerJoin("prtTm.Tournament trnmt on prtTm.tournament_id = trnmt.id ")  
				->innerJoin("tmMbrPrt.Person prsn on tmMbrPrt.person_id = prsn.id ")  
				//->innerJoin("prtTm.Organization org on prtTm.org_id = org.id ")    
				->orderBy("tmMbrPrt.id ASC")
				->where("tmMbrPrt.id IS NOT NULL");
				//if(!is_null($_orgID)) $_qry = $_qry->addWhere("prtTm.org_id = ?", $_orgID);
				if(!is_null($_teamID)) $_qry = $_qry->addWhere("tmMbrPrt.team_id = ? AND tmMbrPrt.team_token_id = ? ", array($_teamID, $_teamTokenID));
				if(!is_null($_activeFlag)) $_qry = $_qry->addWhere("sprtGmPrtn.active_flag = ?", $_activeFlag);      
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("gmCat.category_name LIKE ? OR sprtGmPrtn.id LIKE ? OR sprtGmPrtn.description LIKE ?", array( $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	//
   public static function processCandidates ( ) 
   {
		 
	}
	// process list selection function 
   public static function processCandidateSelection ( $_orgID=null, $_tournamentID=null, $_teamID=null, $_teamTokenID=null, $_sportGameID=null, $_sportGameCategoryID=null, $_keyword=null, $_offset=0, $_limit=10 )
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("TeamMemberParticipantRole tmMbrPrtRol") 
				->innerJoin("tmMbrPrtRol.TeamGameParticipation sprtGmPrtn on tmMbrPrtRol.team_game_participation_id = sprtGmPrtn.id ")  
				->innerJoin("tmMbrPrtRol.TeamMemberParticipant tmMbrPrt on tmMbrPrtRol.team_member_participant_id = tmMbrPrt.id ")  
				->innerJoin("tmMbrPrt.Team prtTm on tmMbrPrt.team_id = prtTm.id ")   
				->innerJoin("sprtGmPrtn.GameCategory gmCat on sprtGmPrtn.sport_game_category_id = gmCat.id ")  
				->innerJoin("sprtGmPrtn.SportGame sprtGm on sprtGmPrtn.sport_game_id = sprtGm.id ")  
				->innerJoin("prtTm.Tournament trnmt on prtTm.tournament_id = trnmt.id ")  
				->innerJoin("tmMbrPrt.Person prsn on tmMbrPrt.person_id = prsn.id ")  
				->innerJoin("prtTm.Organization org on prtTm.org_id = org.id ")   
				->offset($_offset)
				->limit($_limit) 
				->orderBy("tmMbrPrt.id ASC")
				->where("tmMbrPrt.id IS NOT NULL");
				if(!is_null($_teamID)) $_qry = $_qry->addWhere("tmMbrPrt.team_id = ? AND tmMbrPrt.team_token_id = ? ", array($_teamID, $_teamTokenID));
				if(!is_null($_orgID)) $_qry = $_qry->addWhere("org.id = ?", $_orgID);   
				if(!is_null($_participantID)) $_qry = $_qry->addWhere("prsn.id = ?", $_participantID);   
				if(!is_null($_sportGameID)) $_qry = $_qry->addWhere("sprtGm.id = ?", $_sportGameID);   
				if(!is_null($_sportGameCategoryID)) $_qry = $_qry->addWhere("gmCat.id = ?", $_sportGameCategoryID);   
				if(!is_null($_tournamentID)) $_qry = $_qry->addWhere("trnmt.id = ?", $_tournamentID);   
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("prsn.full_name LIKE ? OR gmCat.category_name LIKE ? OR sprtGmPrtn.id LIKE ? OR sprtGmPrtn.description LIKE ?", array( $_keyword, $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	// process list selection function 
   public static function processCandidateMemberRoles ( $_orgID=null, $_tournamentID=null, $_teamID=null, $_teamTokenID=null, $_sportGameID=null, $_participantID=null, $_keyword=null)
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("TeamMemberParticipantRole tmMbrPrtRol") 
				->innerJoin("tmMbrPrtRol.TeamGameParticipation sprtGmPrtn on tmMbrPrtRol.team_game_participation_id = sprtGmPrtn.id ")  
				->innerJoin("tmMbrPrtRol.TeamMemberParticipant tmMbrPrt on tmMbrPrtRol.team_member_participant_id = tmMbrPrt.id ")  
				->innerJoin("tmMbrPrt.Team prtTm on tmMbrPrt.team_id = prtTm.id ")   
				->innerJoin("sprtGmPrtn.GameCategory gmCat on sprtGmPrtn.sport_game_category_id = gmCat.id ")  
				->innerJoin("sprtGmPrtn.SportGame sprtGm on sprtGmPrtn.sport_game_id = sprtGm.id ")  
				->innerJoin("prtTm.Tournament trnmt on prtTm.tournament_id = trnmt.id ")  
				->innerJoin("tmMbrPrt.Person prsn on tmMbrPrt.person_id = prsn.id ")  
				->innerJoin("prtTm.Organization org on prtTm.org_id = org.id ")  
				->orderBy("tmMbrPrt.id ASC")
				->where("tmMbrPrt.id IS NOT NULL");
				if(!is_null($_teamID)) $_qry = $_qry->addWhere("tmMbrPrt.team_id = ? AND tmMbrPrt.team_token_id = ? ", array($_teamID, $_teamTokenID));
				if(!is_null($_orgID)) $_qry = $_qry->addWhere("org.id = ?", $_orgID);   
				if(!is_null($_participantID)) $_qry = $_qry->addWhere("tmMbrPrt.id = ?", $_participantID);   
				if(!is_null($_sportGameID)) $_qry = $_qry->addWhere("sprtGm.id = ?", $_sportGameID);   
				if(!is_null($_tournamentID)) $_qry = $_qry->addWhere("trnmt.id = ?", $_tournamentID);   
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("prsn.full_name LIKE ? OR gmCat.category_name LIKE ? OR sprtGmPrtn.id LIKE ? OR sprtGmPrtn.description LIKE ?", array( $_keyword, $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	// process list selection function 
   public static function processCandidateParticipants ( $_tournamentID=null, $_teamID=null, $_teamTokenID=null, $_sportGameID=null, $_sportGameTokenID=null, $_genderTypeID=null, $_keyword=null, $_exclusion=null, $_offset=0, $_limit=10 ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("TeamMemberParticipantRole tmMbrPrt") 
				->innerJoin("tmMbrPrt.Team prtTm on tmMbrPrt.team_id = prtTm.id ")  
				->innerJoin("tmMbrPrt.TeamGameParticipation sprtGmPrtn on tmMbrPrt.team_game_participation_id = sprtGmPrtn.id ")  
				->innerJoin("sprtGmPrtn.GameCategory gmCat on sprtGmPrtn.sport_game_category_id = gmCat.id ")  
				->innerJoin("sprtGmPrtn.SportGame sprtGm on sprtGmPrtn.sport_game_id = sprtGm.id ")  
				->innerJoin("prtTm.Tournament trnmt on prtTm.tournament_id = trnmt.id ")  
				->innerJoin("tmMbrPrt.Person prsn on tmMbrPrt.person_id = prsn.id ")  
				->innerJoin("prtTm.Organization org on prtTm.org_id = org.id ")   
				->offset($_offset)
				->limit($_limit) 
				->orderBy("tmMbrPrt.id ASC")
				->where("tmMbrPrt.id IS NOT NULL");
				//if(!is_null($_orgID)) $_qry = $_qry->addWhere("prtTm.org_id = ?", $_orgID);
				if(!is_null($_teamID)) $_qry = $_qry->addWhere("prtTm.id = ? AND prtTm.token_id = ? ", array($_teamID, $_teamTokenID));
				if(!is_null($_sportGameID)) $_qry = $_qry->addWhere("sprtGm.id = ? AND sprtGm.token_id = ? ", array($_sportGameID, $_sportGameTokenID));
				if(!is_null($_tournamentID)) $_qry = $_qry->addWhere("trnmt.id = ?", $_tournamentID);   
				if(!is_null($_genderTypeID)) $_qry = $_qry->addWhere("tmMbrPrt.gender_category_id = ?", $_genderTypeID);   
				if(! is_null($_exclusion)) $_qry = $_qry->andWhereNotIn("tmMbrPrt.id ", $_exclusion );          
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("prsn.full_name LIKE ? OR gmCat.category_name LIKE ? OR sprtGmPrtn.id LIKE ? OR sprtGmPrtn.description LIKE ?", array( $_keyword, $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	//
	public static function processObject ( $_orgID=null, $_orgTokenID=null, $_sportGameID, $_sportGameTokenID ) 
	{
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("TeamMemberParticipantRole tmMbrPrt") 
				->innerJoin("tmMbrPrt.Team prtTm on tmMbrPrt.team_id = prtTm.id ")  
				->innerJoin("sprtGmPrtn.Team prtTm on sprtGmPrtn.team_id = prtTm.id ")  
				->innerJoin("sprtGmPrtn.GameCategory gmCat on sprtGmPrtn.sport_game_category_id = gmCat.id ")  
				->innerJoin("sprtGmPrtn.SportGame sprtGm on sprtGmPrtn.sport_game_id = sprtGm.id ")  
				->innerJoin("prtTm.Tournament trnmt on prtTm.tournament_id = trnmt.id ")  
				->innerJoin("prtTm.Organization org on prtTm.org_id = org.id ")   
				->where("sprtGmPrtn.id = ? AND sprtGmPrtn.token_id = ? ", array($_sportGame, $_sportGameTokenID ));
				//if(!is_null($_orgID)) $_qry = $_qry->andWhere("prt.org_id = ? AND prt.org_token_id = ?", array($_orgID, $_orgTokenID));
				$_qry = $_qry->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD); 
			
		return (! $_qry ? null : $_qry ); 	
	}  
	//
   public static function makeObject ( $_orgID=null, $_matchID, $_tokenID  ) 
	{
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("TeamMemberParticipantRole sprtGmPrtn") 
				->innerJoin("sprtGmPrtn.Tournament trnmt on sprtGmPrtn.tournament_id = trnmt.id ")  
				->innerJoin("sprtGmPrtn.SportGame sprtGm on sprtGmPrtn.sport_game_id = sprtGm.id ")  
				->innerJoin("sprtGm.GameCategory gmCat on sprtGm.sport_game_category_id = gmCat.id ")  
				//->innerJoin("tm.Organization org on tm.org_id = org.id ")     
				->where("sprtGmPrtn.id = ? AND sprtGmPrtn.token_id = ? ", array($_matchID, $_tokenID ));
				//if(!is_null($_orgID)) $_qry = $_qry->andWhere("prt.org_id = ? AND prt.org_token_id = ?", array($_orgID, $_orgTokenID));
				$_qry = $_qry->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD); 
			
		return (! $_qry ? null : $_qry ); 	
	}  
	//
   public static function makeCandidateObject ( $_orgID=null, $_activeFlag ) 
	{
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("TeamMemberParticipantRole sprtGmPrtn") 
				->innerJoin("sprtGmPrtn.Tournament trnmt on sprtGmPrtn.tournament_id = trnmt.id ")  
				->innerJoin("sprtGmPrtn.SportGame sprtGm on sprtGmPrtn.sport_game_id = sprtGm.id ")  
				->innerJoin("sprtGm.GameCategory gmCat on sprtGm.sport_game_category_id = gmCat.id ")  
				//->innerJoin("tm.Organization org on tm.org_id = org.id ")  
				->where("sprtGmPrtn.id IS NOT NULL");
				//if(!is_null($_orgID)) $_qry = $_qry->andWhere("prt.org_id = ? AND prt.org_token_id = ?", array($_orgID, $_orgTokenID));
				if(!is_null($_activeFlag)) $_qry = $_qry->andWhere("sprtGmPrtn.active_flag = ?", $_activeFlag);
				$_qry = $_qry->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD); 
			
		return (! $_qry ? null : $_qry ); 	
	}  
	 
	
	/*********************************************************
	********** Candidate selection process *******************
	**********************************************************/
	
	//
	public static function processCandidatePersonSelection ( ) 
   { 
		
	}  
	
	/*********************************************************
	********** Candidate filtering process *******************
	**********************************************************/
	
	public static function processRoleSelection ()
	{
		 
	}
}
