<?php

/**
 * TeamMemberParticipantTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TeamMemberParticipantTable extends PluginTeamMemberParticipantTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object TeamMemberParticipantTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('TeamMemberParticipant');
    }
     //
	public static function processNew ( $_orgID, $_orgTokenID, $_teamID, $_teamTokenID, $_firstName, $_middleName, $_lastName, $_memberRole, $_memberGender, $_dateOfBirth, $_memberNumber, $_memberStatus, $_remark, $_description, $_userID, $_userTokenID )
	{
		 $_flag = true;
				
			
			$_person = PersonTable::processNew ( $_orgID, $_orgTokenID, $_firstName, $_middleName, $_lastName, $_dateOfBirth, $_memberGender, $_nationality, $_partyRelationShipRole, $_memberRole, $_partyRelationShip, $_partyAddressOne, $_phoneNumberOne, $_phoneNumberTwo, $_mobileNumberOne, $_mobileNumberTwo, $_pobox, $_faxNumber, $_email, $_addressRemark, $_description, $_partyCode, $_userID, $_userTokenID );
			//$_codeConfig = CodeGeneratorTable::processDefaultSelection (null, null, SystemCore::$_GAME, true  ); 
			//$_codeNumber =  $_codeConfig->hasDeletedCode ? $_codeConfig->deletedCode:$_codeConfig->lastCode; 
			//$_sportGameNumber = $_codeConfig->prefixCode.'-'.SystemCore::processCodeInitialNumber($_codeNumber);
			
			//$_sportGameTypeName = $_sportGameName ? $_sportGameName:(TournamentCore::processTypeExclusion ());
			//$_categoryAlias = $_categoryAlias ? SystemCore::makeAlias ( $_categoryAlias ):SystemCore::makeAlias ( $_categoryName );
			//$_sportGameAlias = $_sportGameAlias ? SystemCore::makeAlias ( $_sportGameAlias ):SystemCore::makeAlias ( $_sportGameName );
			$_tournament = self::processSave ( $_person->id, $_person->token_id, $_teamID, $_teamTokenID, $_person->full_name, $_memberGender, $_memberRole, $_memberNumber, $_memberStatus, $_remark  );
		
		return $_tournament;
	}
	//
	public static function processCreate ( )
	{
		
	} 
	public static function processSave ( $_personID, $_personTokenID, $_teamID, $_teamTokenID, $_memberFullName, $_memberGender, $_memberRole, $_memberNumber, $_memberStatus, $_remark )
	{
		//try {
			//if(!$_orgID || !$_name) return false;
    	
			$_token = trim($_personTokenID).trim($_personID).trim($_teamTokenID).trim($_teamID).rand('11111', '99999'); 
			$_startDate = date('m/d/Y', time());
			$_nw = new TeamMemberParticipant (); 
			$_nw->token_id = sha1(md5(trim($_token))); 
			$_nw->team_id = trim($_teamID); 
			$_nw->team_token_id = sha1(md5(trim($_teamTokenID)));  
			$_nw->person_id = trim($_personID); 
			$_nw->person_token_id = sha1(md5(trim($_personTokenID)));  
			$_nw->member_role_id = trim($_memberRole); 
			$_nw->gender_category_id = trim($_memberGender); 
			$_nw->member_full_name = trim($_memberFullName); 
			$_nw->member_number = trim($_memberNumber); 
			$_nw->active_flag = true;  
			$_nw->status = $_memberStatus ? $_memberStatus:trim(PartyCore::$_ACTIVE);   
			$_nw->description = SystemCore::processDescription ( trim($_memberFullName), trim($_remark) );  
			$_nw->save(); 
			
			return $_nw; 
		//} catch ( Exception $e) {
	    //  return false; 
		//}
	} 
	public static function processEdit ( )
	{
		
	} 
	//
	public static function processUpdate ( )
	{
		   
	} 
	//
	public static function processDelete( ) 
   {	
		 
	}
	//
	public static function appendPartialQueryFields ( ) 
	{		
		 
	}
	//
	public static function appendCandidateQueryFields ( ) 
	{		
		 
	}
	public static function appendQueryFields ( ) 
	{		
		 $_queryFileds = "tmMbrPrt.id, tmMbrPrt.member_full_name as memberFullName, tmMbrPrt.member_role_id as memberRoleID, tmMbrPrt.gender_category_id as genderCategoryID ,
		 
								 
								prtTm.id as teamID, prtTm.token_id as teamTokenID, prtTm.team_name as partcipantTeamName, prtTm.alias as partcipantTeamAlias, prtTm.country_id as teamCountryID,
								 
								trnmt.id as tournamentID, trnmt.token_id as tournamentTokenID, trnmt.name as tournamentName, trnmt.id as tournamentAlias,
								prsn.id as personID, prsn.name as memberName, prsn.middle_name as memberMiddleName, prsn.last_name as memberLastName, prsn.full_name as memberFullName,
		";	
		return $_queryFileds;
	}
	//
  // process list selection function 
   public static function processSelection ( $_tournamentID=null, $_teamID=null, $_teamTokenID=null, $_sportGameID=null, $_sportGameTokenID=null, $_keyword=null, $_exclusion=null, $_offset=0, $_limit=10 ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("TeamMemberParticipant tmMbrPrt") 
				->innerJoin("tmMbrPrt.Team prtTm on tmMbrPrt.team_id = prtTm.id ")   
				->innerJoin("prtTm.Tournament trnmt on prtTm.tournament_id = trnmt.id ")  
				->innerJoin("tmMbrPrt.Person prsn on tmMbrPrt.person_id = prsn.id ")  
				->innerJoin("prtTm.Organization org on prtTm.org_id = org.id ")   
				->offset($_offset)
				->limit($_limit) 
				->orderBy("tmMbrPrt.id ASC")
				->where("tmMbrPrt.id IS NOT NULL");
				//if(!is_null($_orgID)) $_qry = $_qry->addWhere("prtTm.org_id = ?", $_orgID);
				if(!is_null($_teamID)) $_qry = $_qry->addWhere("tmMbrPrt.team_id = ? AND tmMbrPrt.team_token_id = ? ", array($_teamID, $_teamTokenID));
				//if(!is_null($_sportGameID)) $_qry = $_qry->addWhere("tmMbrPrt.sport_game_id = ? AND tmMbrPrt.sport_game_token_id = ? ", array($_sportGameID, $_sportGameTokenID));
				if(!is_null($_tournamentID)) $_qry = $_qry->addWhere("trnmt.id = ?", $_tournamentID);   
				if(! is_null($_exclusion)) $_qry = $_qry->andWhereNotIn("tmMbrPrt.id ", $_exclusion );          
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("prsn.full_name LIKE ? OR gmCat.category_name LIKE ? OR sprtGmPrt.id LIKE ? OR sprtGmPrt.description LIKE ?", array( $_keyword, $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	
	// process list selection function 
   public static function processAll ( $_orgID=null, $_tournamentID=null, $_teamID=null, $_teamTokenID=null, $_gameTypeID=null, $_keyword=null, $_exclusion=null ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("TeamMemberParticipant tmMbrPrt") 
				->innerJoin("tmMbrPrt.Team prtTm on tmMbrPrt.team_id = prtTm.id ")  
				->innerJoin("tmMbrPrt.TeamGameParticipation sprtGmPrt on tmMbrPrt.sport_game_id = sprtGmPrt.id ")  
				->innerJoin("sprtGmPrt.GameCategory gmCat on sprtGmPrt.sport_game_category_id = gmCat.id ")  
				->innerJoin("sprtGmPrt.SportGame sprtGm on sprtGmPrt.sport_game_id = sprtGm.id ")  
				->innerJoin("prtTm.Tournament trnmt on prtTm.tournament_id = trnmt.id ")  
				->innerJoin("tmMbrPrt.Person prsn on tmMbrPrt.person_id = prsn.id ")  
				//->innerJoin("prtTm.Organization org on prtTm.org_id = org.id ")    
				->orderBy("tmMbrPrt.id ASC")
				->where("tmMbrPrt.id IS NOT NULL");
				//if(!is_null($_orgID)) $_qry = $_qry->addWhere("prtTm.org_id = ?", $_orgID);
				if(!is_null($_teamID)) $_qry = $_qry->addWhere("tmMbrPrt.team_id = ? AND tmMbrPrt.team_token_id = ? ", array($_teamID, $_teamTokenID));
				if(!is_null($_activeFlag)) $_qry = $_qry->addWhere("sprtGmPrt.active_flag = ?", $_activeFlag);      
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("gmCat.category_name LIKE ? OR sprtGmPrt.id LIKE ? OR sprtGmPrt.description LIKE ?", array( $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	//
   public static function processCandidates ( ) 
   {
		 
	}
	// process list selection function 
   public static function processCandidateSelection ( $_orgID=null, $_tournamentID=null, $_teamID=null, $_teamTokenID=null, $_gameTypeID=null, $_genderCategory=null, $_keyword=null, $_exclusion=null, $_offset=0, $_limit=10 ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("TeamMemberParticipant tmMbrPrt") 
				->innerJoin("tmMbrPrt.Team prtTm on tmMbrPrt.team_id = prtTm.id ")  
				->innerJoin("tmMbrPrt.TeamGameParticipation sprtGmPrt on tmMbrPrt.team_game_game_participation_id = sprtGmPrt.id ")  
				->innerJoin("sprtGmPrt.GameCategory gmCat on sprtGmPrt.sport_game_category_id = gmCat.id ")  
				->innerJoin("sprtGmPrt.SportGame sprtGm on sprtGmPrt.sport_game_id = sprtGm.id ")  
				->innerJoin("prtTm.Tournament trnmt on prtTm.tournament_id = trnmt.id ")  
				->innerJoin("tmMbrPrt.Person prsn on tmMbrPrt.person_id = prsn.id ")  
				//->innerJoin("prtTm.Organization org on prtTm.org_id = org.id ")   
				->offset($_offset)
				->limit($_limit) 
				->orderBy("tmMbrPrt.id ASC")
				->where("tmMbrPrt.id IS NOT NULL");
				//if(!is_null($_orgID)) $_qry = $_qry->addWhere("sprtGmPrt.org_id = ? ", $_orgID);
				if(!is_null($_teamID)) $_qry = $_qry->addWhere("tmMbrPrt.team_id = ? AND tmMbrPrt.team_token_id = ? ", array($_teamID, $_teamTokenID));
				if(!is_null($_genderCategory)) $_qry = $_qry->addWhere("sprtGmPrt.gender_category_id = ?", $_genderCategory);  
				if(!is_null($_activeFlag)) $_qry = $_qry->addWhere("sprtGmPrt.active_flag = ?", $_activeFlag);    
				if(! is_null($_exclusion)) $_qry = $_qry->andWhereNotIn("sprtGmPrt.id ", $_exclusion );  
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("gmCat.category_name LIKE ? OR sprtGmPrt.id LIKE ? OR sprtGmPrt.description LIKE ?", array( $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	// process list selection function 
   public static function processCandidateParticipants ( $_tournamentID=null, $_teamID=null, $_teamTokenID=null, $_sportGameID=null, $_sportGameTokenID=null, $_genderTypeID=null, $_keyword=null, $_exclusion=null, $_offset=0, $_limit=10 ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("TeamMemberParticipant tmMbrPrt") 
				->innerJoin("tmMbrPrt.Team prtTm on tmMbrPrt.team_id = prtTm.id ")  
				->innerJoin("tmMbrPrt.TeamGameParticipation sprtGmPrt on tmMbrPrt.team_game_participation_id = sprtGmPrt.id ")  
				->innerJoin("sprtGmPrt.GameCategory gmCat on sprtGmPrt.sport_game_category_id = gmCat.id ")  
				->innerJoin("sprtGmPrt.SportGame sprtGm on sprtGmPrt.sport_game_id = sprtGm.id ")  
				->innerJoin("prtTm.Tournament trnmt on prtTm.tournament_id = trnmt.id ")  
				->innerJoin("tmMbrPrt.Person prsn on tmMbrPrt.person_id = prsn.id ")  
				->innerJoin("prtTm.Organization org on prtTm.org_id = org.id ")   
				->offset($_offset)
				->limit($_limit) 
				->orderBy("tmMbrPrt.id ASC")
				->where("tmMbrPrt.id IS NOT NULL");
				//if(!is_null($_orgID)) $_qry = $_qry->addWhere("prtTm.org_id = ?", $_orgID);
				if(!is_null($_teamID)) $_qry = $_qry->addWhere("prtTm.id = ? AND prtTm.token_id = ? ", array($_teamID, $_teamTokenID));
				if(!is_null($_sportGameID)) $_qry = $_qry->addWhere("sprtGm.id = ? AND sprtGm.token_id = ? ", array($_sportGameID, $_sportGameTokenID));
				if(!is_null($_tournamentID)) $_qry = $_qry->addWhere("trnmt.id = ?", $_tournamentID);   
				if(!is_null($_genderTypeID)) $_qry = $_qry->addWhere("tmMbrPrt.gender_category_id = ?", $_genderTypeID);   
				if(! is_null($_exclusion)) $_qry = $_qry->andWhereNotIn("tmMbrPrt.id ", $_exclusion );          
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("prsn.full_name LIKE ? OR gmCat.category_name LIKE ? OR sprtGmPrt.id LIKE ? OR sprtGmPrt.description LIKE ?", array( $_keyword, $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	// process list selection function 
   public static function processCandidateMembers ( $_tournamentID=null, $_teamID=null, $_teamTokenID=null, $_genderCategoryID=null, $_keyword=null, $_exclusion=null, $_offset=0, $_limit=10 ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("TeamMemberParticipant tmMbrPrt") 
				->innerJoin("tmMbrPrt.Team prtTm on tmMbrPrt.team_id = prtTm.id ")   
				->innerJoin("prtTm.Tournament trnmt on prtTm.tournament_id = trnmt.id ")  
				->innerJoin("tmMbrPrt.Person prsn on tmMbrPrt.person_id = prsn.id ")  
				->innerJoin("prtTm.Organization org on prtTm.org_id = org.id ")   
				->offset($_offset)
				->limit($_limit) 
				->orderBy("tmMbrPrt.id ASC")
				->where("tmMbrPrt.id IS NOT NULL");
				if(!is_null($_teamID)) $_qry = $_qry->addWhere("tmMbrPrt.team_id = ? AND tmMbrPrt.team_token_id = ? ", array($_teamID, $_teamTokenID));
				if(!is_null($_tournamentID)) $_qry = $_qry->addWhere("trnmt.id = ?", $_tournamentID);   
				if(! is_null($_exclusion)) $_qry = $_qry->andWhereNotIn("tmMbrPrt.id ", $_exclusion );          
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("prsn.full_name LIKE ? OR prtTm.team_name LIKE ? OR prtTm.team_number LIKE ? OR tmMbrPrt.description LIKE ?", array( $_keyword, $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	//
	public static function processObject ( $_orgID=null, $_orgTokenID=null, $_sportGameID, $_sportGameTokenID ) 
	{
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("TeamMemberParticipant tmMbrPrt") 
				->innerJoin("tmMbrPrt.Team prtTm on tmMbrPrt.team_id = prtTm.id ")  
				->innerJoin("sprtGmPrt.Team prtTm on sprtGmPrt.team_id = prtTm.id ")  
				->innerJoin("sprtGmPrt.GameCategory gmCat on sprtGmPrt.sport_game_category_id = gmCat.id ")  
				->innerJoin("sprtGmPrt.SportGame sprtGm on sprtGmPrt.sport_game_id = sprtGm.id ")  
				->innerJoin("prtTm.Tournament trnmt on prtTm.tournament_id = trnmt.id ")  
				->innerJoin("prtTm.Organization org on prtTm.org_id = org.id ")   
				->where("sprtGmPrt.id = ? AND sprtGmPrt.token_id = ? ", array($_sportGame, $_sportGameTokenID ));
				//if(!is_null($_orgID)) $_qry = $_qry->andWhere("prt.org_id = ? AND prt.org_token_id = ?", array($_orgID, $_orgTokenID));
				$_qry = $_qry->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD); 
			
		return (! $_qry ? null : $_qry ); 	
	}  
	//
   public static function makeObject ( $_orgID=null, $_matchID, $_tokenID  ) 
	{
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("TeamMemberParticipant sprtGmPrt") 
				->innerJoin("sprtGmPrt.Tournament trnmt on sprtGmPrt.tournament_id = trnmt.id ")  
				->innerJoin("sprtGmPrt.SportGame sprtGm on sprtGmPrt.sport_game_id = sprtGm.id ")  
				->innerJoin("sprtGm.GameCategory gmCat on sprtGm.sport_game_category_id = gmCat.id ")  
				//->innerJoin("tm.Organization org on tm.org_id = org.id ")     
				->where("sprtGmPrt.id = ? AND sprtGmPrt.token_id = ? ", array($_matchID, $_tokenID ));
				//if(!is_null($_orgID)) $_qry = $_qry->andWhere("prt.org_id = ? AND prt.org_token_id = ?", array($_orgID, $_orgTokenID));
				$_qry = $_qry->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD); 
			
		return (! $_qry ? null : $_qry ); 	
	}  
	//
   public static function makeCandidateObject ( $_orgID=null, $_activeFlag ) 
	{
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("TeamMemberParticipant sprtGmPrt") 
				->innerJoin("sprtGmPrt.Tournament trnmt on sprtGmPrt.tournament_id = trnmt.id ")  
				->innerJoin("sprtGmPrt.SportGame sprtGm on sprtGmPrt.sport_game_id = sprtGm.id ")  
				->innerJoin("sprtGm.GameCategory gmCat on sprtGm.sport_game_category_id = gmCat.id ")  
				//->innerJoin("tm.Organization org on tm.org_id = org.id ")  
				->where("sprtGmPrt.id IS NOT NULL");
				//if(!is_null($_orgID)) $_qry = $_qry->andWhere("prt.org_id = ? AND prt.org_token_id = ?", array($_orgID, $_orgTokenID));
				if(!is_null($_activeFlag)) $_qry = $_qry->andWhere("sprtGmPrt.active_flag = ?", $_activeFlag);
				$_qry = $_qry->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD); 
			
		return (! $_qry ? null : $_qry ); 	
	}  
	 
	
	/*********************************************************
	********** Candidate selection process *******************
	**********************************************************/
	
	//
	public static function processCandidatePersonSelection ( ) 
   { 
		
	}  
	
	/*********************************************************
	********** Candidate filtering process *******************
	**********************************************************/
	
	public static function processRoleSelection ()
	{
		 
	}
}


