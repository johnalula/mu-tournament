<?php

/**
 * TeamGameParticipation
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    mu-TMS
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class TeamGameParticipation extends PluginTeamGameParticipation
{
	public function checkInitiated ()
	{
		return (($this->approval_status ==TournamentCore::$_INITIATED) && ($this->status ==TournamentCore::$_INITIATED)) ? true:false;
	}
	public function checkConfirmation ()
	{
		return (($this->confirm_status !=TournamentCore::$_ACTIVE) && (!$this->confirm_flag)) ? true:false;
	}
	public function checkActivation ()
	{
		return (($this->status !=TournamentCore::$_ACTIVE) && (!$this->active_flag)) ? true:false;
	}
	//grouped_flag: { type: boolean, default: false } 
   // confirmed_flag: { type: boolean, default: false } 
  //  active_flag: { type: boolean, default: false } 
  //  grouped_status: { type: integer, default: 1  } 
   // confirmed_status: { type: integer, default: 1  } 
   // status: { type: integer, default: 1  } 
    
	public function makePending ()
	{
		$_flag = true;   
			$this->grouped_flag = false;   
			$this->confirmed_flag = false;   
			$this->active_flag = false;   
			$this->grouped_status = trim(TournamentCore::$_PENDING);   
			$this->confirmed_status = trim(TournamentCore::$_PENDING);   
			$this->status = trim(TournamentCore::$_PENDING); 
			$this->save();
			
		return $_flag;
	}
	public function makeActivation ()
	{
		$_flag = true;    
			$this->grouped_flag = false;   
			$this->confirmed_flag = false;   
			$this->active_flag = true;   
			$this->grouped_status = trim(TournamentCore::$_PENDING);   
			$this->confirmed_status = trim(TournamentCore::$_PENDING);   
			$this->status = trim(TournamentCore::$_ACTIVE); 
			$this->save();

		return $_flag;
	}
	
	public function makeApproval ()
	{
		$_flag = true;   
			$_effectiveDate = date('m/d/Y', time());  
			$this->grouped_flag = true;   
			$this->confirmed_flag = true;   
			$this->active_flag = true;   
			$this->grouped_status = trim(TournamentCore::$_APPROVED);   
			$this->confirmed_status = trim(TournamentCore::$_CONFIRMED);   
			$this->status = trim(TournamentCore::$_ACTIVE); 
			$this->save();
			$this->effective_date = trim($_effectiveDate);  
			$this->save();
			
		return $_flag;
	}
	public function makeConfirmation ()
	{
		$_flag = true;  
		$_effectiveDate = date('m/d/Y', time());   
		$this->confirmed_flag = true; 
		$this->grouped_flag = true; 
		$this->active_flag = true; 
		$this->grouped_status = trim(TournamentCore::$_COMPLETED); 
		$this->confirmed_status = trim(TournamentCore::$_CONFIRMED); 
		$this->status = trim(TournamentCore::$_ACTIVE); 
		$this->effective_date = $_effectiveDate;  
		$this->save();
		return $_flag;
	} 
	public function makeCompletion ()
	{
		$_flag = true;  
		$_effectiveDate = date('m/d/Y', time());   
		$this->confirmed_flag = true; 
		$this->grouped_flag = true; 
		$this->active_flag = true; 
		$this->grouped_status = trim(TournamentCore::$_COMPLETED); 
		$this->confirmed_status = trim(TournamentCore::$_CONFIRMED); 
		$this->status = trim(TournamentCore::$_COMPLETED); 
		$this->effective_date = $_effectiveDate;  
		$this->save();
		return $_flag;
	}
	public function makeFinalization ()
	{
		$_flag = true;  
		$_effectiveDate = date('m/d/Y', time());   
		$this->confirmed_flag = true; 
		$this->grouped_flag = true; 
		$this->active_flag = true; 
		$this->grouped_status = trim(TournamentCore::$_FINALIZED); 
		$this->confirmed_status = trim(TournamentCore::$_FINALIZED); 
		$this->status = trim(TournamentCore::$_FINALIZED); 
		$this->effective_date = $_effectiveDate;  
		$this->save();
		return $_flag;
	}
}
