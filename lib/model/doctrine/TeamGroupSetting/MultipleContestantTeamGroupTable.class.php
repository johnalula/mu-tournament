<?php

/**
 * MultipleContestantTeamGroupTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class MultipleContestantTeamGroupTable extends PluginMultipleContestantTeamGroupTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object MultipleContestantTeamGroupTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('MultipleContestantTeamGroup');
    }
    //
	public static function processNew ( $_tournamentID, $_tournamentGroupID, $_tournamentGroupTokenID, $_sportGameID, $_sportGameTokenID, $_sportGameFullName, $_groupNumber, $_numberOfTeamsPerGroup, $_contestantTeamMode, $_genderCategory, $_mandatoryFlag, $_groupStatus, $_groupCode, $_description )
	{
			$_sportGameGroup = self::processSave ( $_tournamentID, $_tournamentGroupID, $_tournamentGroupTokenID, $_sportGameID, $_sportGameTokenID, $_sportGameFullName, $_groupNumber, $_numberOfTeamsPerGroup, $_contestantTeamMode, $_genderCategory, $_mandatoryFlag, $_groupStatus, $_groupCode, $_description );
		
		return $_sportGameGroup;
	}
	//
	public static function processCreate ( )
	{
		
	} 
	public static function processSave ( $_tournamentID, $_tournamentGroupID, $_tournamentGroupTokenID, $_sportGameID, $_sportGameTokenID, $_sportGameFullName, $_groupNumber, $_numberOfTeamsPerGroup, $_contestantTeamMode, $_genderCategory, $_mandatoryFlag, $_groupStatus, $_groupCode, $_description )
	{
		//try {
			//if(!$_orgID || !$_name) return false;
    
			$_token = trim($_tournamentID).trim($_sportGameID).trim($_sportGameTokenID).rand('11111', '99999'); 
			$_startDate = date('m/d/Y', time());
			$_nw = new MultipleContestantTeamGroup (); 
			$_nw->token_id = sha1(md5(trim($_token))); 
			$_nw->tournament_id = trim($_tournamentID); 
			$_nw->tournament_team_group_id = trim($_tournamentGroupID); 
			$_nw->tournament_team_group_token_id = sha1(md5(trim($_tournamentGroupTokenID)));  
			$_nw->sport_game_id = trim($_sportGameID); 
			$_nw->sport_game_token_id = sha1(md5(trim($_sportGameTokenID)));  
			$_nw->group_name = trim('Group '.TournamentCore::processRoundNumberValue ($_groupNumber)); 
			$_nw->group_number = trim($_groupNumber); 
			$_nw->number_of_teams_per_group = trim($_numberOfTeamsPerGroup); 
			$_nw->group_code = trim($_groupCode); 
			$_nw->contestant_team_mode = trim($_contestantTeamMode); 
			$_nw->gender_category_id = trim($_genderCategory); 
			$_nw->group_team_number_mandatory_flag = $_mandatoryFlag ? trim($_mandatoryFlag):false; 
			$_nw->start_date = trim($_startDate); 
			$_nw->active_flag = false;  
			$_nw->competition_status = $_apporvalStatus ? trim($_apporvalStatus):TournamentCore::$_INITIATED;   
			$_nw->approval_status = $_apporvalStatus ? trim($_apporvalStatus):TournamentCore::$_INITIATED;   
			$_nw->status = $_groupStatus ? trim($_groupStatus):TournamentCore::$_INITIATED;   
			$_nw->description = SystemCore::processDescription ((trim($_sportGameFullName).' - '.trim(TournamentCore::processGenderValue($_genderCategory)).' - '.trim($_groupTypeName)), trim($_description) );  
			$_nw->save(); 
			
			return $_nw; 
		//} catch ( Exception $e) {
	    //  return false; 
		//}
	} 
	public static function processEdit ( )
	{
		
	} 
	//
	public static function processUpdate ( )
	{
		   
	} 
	//
	public static function processDelete( ) 
   {	
		 
	}
	//
	public static function appendPartialQueryFields ( ) 
	{		
		 
	}
	//
	public static function appendCandidateQueryFields ( ) 
	{		
		 
	}
	public static function appendQueryFields ( ) 
	{		
		 $_queryFileds = "trnmtMtch.id, trnmtMtch.sport_game_category_id as matchSportGameCategoryID, trnmtMtch.match_number as matchNumber, trnmtMtch.active_flag as activeFlag, trnmtMtch.start_date as matchDate, 
								gmCat.id as gameCategoryID, gmCat.token_id as gameCategoryTokenID, gmCat.category_name as gameCategoryName, gmCat.alias as gameCategoryAlias,
								trnmt.id as tournamentID, trnmt.token_id as tournamentTokenID, trnmt.name as tournamentName, trnmt.alias as tournamentAlias,
		";	
		return $_queryFileds;
	}
	//
  // process list selection function 
   public static function processSelection ( $_orgID=null, $_orgTokenID=null, $_categoryID=null, $_gameTypeID=null, $_keyword=null, $_offset=0, $_limit=10 ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("MultipleContestantTeamGroup trnmtMtch") 
				->leftJoin("trnmtMtch.Tournament trnmt on trnmtMtch.tournament_id = trnmt.id ")  
				->leftJoin("trnmtMtch.GameCategory gmCat on trnmtMtch.sport_game_category_id = gmCat.id ")  
				//->innerJoin("trnmtMtch.Organization org on trnmtMtch.org_id = org.id ")   
				->offset($_offset)
				->limit($_limit) 
				->orderBy("trnmtMtch.id ASC")
				->where("trnmtMtch.id IS NOT NULL");
				//if(!is_null($_orgID)) $_qry = $_qry->addWhere("trnmtMtch.org_id = ? AND trnmtMtch.org_token_id = ? ", array($_orgID, $_orgTokenID));
				/*if(!is_null($_activeFlag)) $_qry = $_qry->addWhere("trnmtMtch.active_flag = ?", $_activeFlag);    
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("trnmtMtch.category_name LIKE ? OR trnmtMtch.alias LIKE ? OR trnmtMtch.description LIKE ?", array( $_keyword, $_keyword, $_keyword));*/
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	//
   public static function processAll ($_orgID=null, $_orgTokenID=null, $_keyword=null ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("MultipleContestantTeamGroup trnmtMtch") 
				->innerJoin("trnmtMtch.Tournament trnmt on trnmtMtch.tournament_id = trnmt.id ")  
				->innerJoin("sprtGm.GameCategory gmCat on sprtGm.sport_game_category_id = gmCat.id ")  
				->orderBy("trnmtMtch.id ASC")
				->where("trnmtMtch.id IS NOT NULL");
				//if(!is_null($_orgID)) $_qry = $_qry->addWhere("trnmtMtch.org_id = ? AND trnmtMtch.org_token_id = ? ", array($_orgID, $_orgTokenID));
				if(!is_null($_activeFlag)) $_qry = $_qry->addWhere("trnmtMtch.active_flag = ?", $_activeFlag);    
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("trnmtMtch.category_name LIKE ? OR trnmtMtch.alias LIKE ? OR trnmtMtch.description LIKE ?", array( $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	//
   public static function processCandidates ( ) 
   {
		 
	}
	//
	public static function processObject ( $_orgID=null, $_orgTokenID=null, $_matchID, $_tokenID ) 
	{
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("MultipleContestantTeamGroup trnmtMtch") 
				->innerJoin("trnmtMtch.Tournament trnmt on trnmtMtch.tournament_id = trnmt.id ")  
				->innerJoin("trnmtMtch.GameCategory gmCat on trnmtMtch.sport_game_category_id = gmCat.id ")  
				//->innerJoin("tm.Organization org on tm.org_id = org.id ")     
				->where("trnmtMtch.id = ? AND trnmtMtch.token_id = ? ", array($_matchID, $_tokenID ));
				//if(!is_null($_orgID)) $_qry = $_qry->andWhere("prt.org_id = ? AND prt.org_token_id = ?", array($_orgID, $_orgTokenID));
				$_qry = $_qry->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD); 
			
		return (! $_qry ? null : $_qry ); 	
	}  
	//
   public static function makeObject ( $_orgID=null, $_matchID, $_tokenID  ) 
	{
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("MultipleContestantTeamGroup trnmtMtch") 
				->innerJoin("trnmtMtch.Tournament trnmt on trnmtMtch.tournament_id = trnmt.id ")  
				->innerJoin("trnmtMtch.GameCategory gmCat on trnmtMtch.sport_game_category_id = gmCat.id ")  
				//->innerJoin("tm.Organization org on tm.org_id = org.id ")     
				->where("trnmtMtch.id = ? AND trnmtMtch.token_id = ? ", array($_matchID, $_tokenID ));
				//if(!is_null($_orgID)) $_qry = $_qry->andWhere("prt.org_id = ? AND prt.org_token_id = ?", array($_orgID, $_orgTokenID));
				$_qry = $_qry->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD); 
			
		return (! $_qry ? null : $_qry ); 	
	}  
	//
   public static function makeCandidateObject ( $_orgID=null, $_activeFlag ) 
	{
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("MultipleContestantTeamGroup trnmtMtch") 
				->innerJoin("trnmtMtch.GameCategory gmCat on trnmtMtch.sport_game_category_id = gmCat.id ")  
				//->innerJoin("tm.Organization org on tm.org_id = org.id ")  
				->where("trnmtMtch.id IS NOT NULL");
				//if(!is_null($_orgID)) $_qry = $_qry->andWhere("prt.org_id = ? AND prt.org_token_id = ?", array($_orgID, $_orgTokenID));
				if(!is_null($_activeFlag)) $_qry = $_qry->andWhere("trnmtMtch.active_flag = ?", $_activeFlag);
				$_qry = $_qry->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD); 
			
		return (! $_qry ? null : $_qry ); 	
	}  
	 
	
	/*********************************************************
	********** Candidate selection process *******************
	**********************************************************/
	
	//
	public static function processCandidatePersonSelection ( ) 
   { 
		
	}  
	
	/*********************************************************
	********** Candidate filtering process *******************
	**********************************************************/
	
	public static function processRoleSelection ()
	{
		 
	}
}
