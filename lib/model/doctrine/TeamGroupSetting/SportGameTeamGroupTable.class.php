<?php

/**
 * SportGameTeamGroupTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SportGameTeamGroupTable extends PluginSportGameTeamGroupTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object SportGameTeamGroupTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('SportGameTeamGroup');
    }
    //
   public static function processNew ( $_orgID, $_orgTokenID, $_tournamentID, $_teamGroupID, $_teamGroupTokenID, $_memberTeamID, $_memberTeamTokenID, $_memberTeamName, $_entryDate, $_teamStatus, $_description, $_dataCreationMode, $_userID, $_userTokenID )
	{
			$_sportGameTeamGroup =  SportGameGroupTable::processObject ($_orgID, sha1(md5($_orgTokenID)), $_teamGroupID, $_teamGroupTokenID );  
			
			switch ( trim($_dataCreationMode) ) {
				case SystemCore::$_SINGLE_DATA: $_groupMemberTeam = self::processSave ( $_tournamentID, $_teamGroupID, $_teamGroupTokenID, $_memberTeamID, $_memberTeamTokenID, $_memberTeamName, $_entryDate, $_teamStatus, $_description );
				break; 
				case SystemCore::$_MULTIPLE_DATA: 
					
						$_groupMemberTeams = self::processCandidates ( $_orgID, sha1(md5($_orgTokenID)), $_tournamentID, $_gameTypeID, $_sportGameTeamGroup->groupGenderCategoryID, $_groupID, $_keyword );
						$_exclusion = array();   
						foreach($_groupMemberTeams as $_groupMemberTeam) {
							$_exclusion[] = $_groupMemberTeam->team_id;
						} 
		
						$_sportGameGroupParticipantTeams =   TeamGameParticipationTable::processAllCandidateParticipants ( $_orgID, $_sportGameTeamGroup->tournamentID, $_participantTeam->teamID, sha1(md5($_participantTeam->teamTokenID)), $_sportGameTeamGroup->sportGameID, $_gameTypeID, $_sportGameTeamGroup->groupGenderCategoryID, $_keyword, $_exclusion);
		
					foreach($_sportGameGroupParticipantTeams as $_participantTeam ) {
						
						$_groupMemberTeam = self::processSave ( $_participantTeam->teamID, $_participantTeam->teamTokenID, $_teamGroupID, $_teamGroupTokenID, $_participantTeam->teamName, $_entryDate, $_teamStatus, $_description );
					}
				 
				break;
			
			}
			
			$_falg1 = $_sportGameTeamGroup->makeProcessActivation ();
		
		return $_groupMemberTeam;
	}
	//
	public static function processCreate ( )
	{
		
	} 
	public static function processSave (  $_tournamentID, $_teamGroupID, $_teamGroupTokenID, $_memberTeamID, $_memberTeamTokenID, $_memberTeamName, $_entryDate, $_teamStatus, $_description )
	{
		//try {
			//if(!$_orgID || !$_name) return false;
    
			$_token = trim($_memberTeamID).trim($_memberTeamTokenID).trim($_teamGroupID).rand('11111', '99999'); 
			$_startDate = date('m/d/Y', time());
			$_nw = new SportGameTeamGroup (); 
			$_nw->token_id = sha1(md5(trim($_token))); 
			$_nw->tournament_id = trim($_tournamentID); 
			$_nw->sport_game_group_id = trim($_teamGroupID); 
			$_nw->sport_game_group_token_id = sha1(md5(trim($_teamGroupTokenID))); 
			$_nw->team_id = trim($_memberTeamID); 
			$_nw->team_token_id = sha1(md5(trim($_memberTeamTokenID)));  
			$_nw->start_date = $_entryDate ? trim($_entryDate):trim($_startDate);; 
			$_nw->active_flag = false;  
			$_nw->status = $_teamStatus ? trim($_teamStatus):TournamentCore::$_PENDING;   
			$_nw->description = SystemCore::processDescription ( (trim($_memberTeamName)), trim($_description) );  
			$_nw->save(); 
			
			return $_nw; 
		//} catch ( Exception $e) {
	    //  return false; 
		//}
	} 
	public static function processEdit ( )
	{
		
	} 
	//
	public static function processUpdate ( )
	{
		   
	} 
	//
	public static function processDelete( ) 
   {	
		 
	}
	//
	public static function appendPartialQueryFields ( ) 
	{		
		 
	}
	//
	public static function appendCandidateQueryFields ( ) 
	{		
		 
	}
	public static function appendQueryFields ( ) 
	{		
		 $_queryFileds = "gmGrpMbr.id, gmGrpMbr.active_flag as activeFlag, 
								gmGrp.id, gmGrp.group_name as sportGameGroupName, gmGrp.group_code as sportGameGroupCode, gmGrp.contestant_team_mode as contestantTeamMode, gmGrp.active_flag as groupActiveFlag, gmGrp.gender_category_id as groupGenderCategoryID, gmGrp.start_date as matchDate,
								sprtGm.id as sportGameID, sprtGm.token_id as sportGameTokenID,sprtGm.sport_game_category_id as matchSportGameCategoryID, 
								gmCat.id as gameCategoryID, gmCat.token_id as gameCategoryTokenID, gmCat.category_name as gameCategoryName, gmCat.alias as gameCategoryAlias,
								trnmt.id as tournamentID, trnmt.token_id as tournamentTokenID, trnmt.name as tournamentName, trnmt.alias as tournamentAlias,
								grpTyp.id as groupTypeID,
								tmPrt.id as teamID, tmPrt.token_id as teamTokenID, tmPrt.team_name as teamName, tmPrt.alias as teamAlias, tmPrt.country_id as teamCountry, tmPrt.team_city as teamCity, tmPrt.team_number as teamNumber, tmPrt.confirm_flag as confirmFlag,
								
							 (EXISTS (SELECT tmGmPrtn.id FROM TeamGameParticipation tmGmPrtn WHERE tmGmPrtn.team_id = tmPrt.id AND tmGmPrtn.team_token_id = ".sha1."(".md5."("."tmPrt.token_id)) )) as hasGameParticipation, 
		";	
		return $_queryFileds;
	}
	//
  // process list selection function 
   public static function processSelection ( $_orgID=null, $_orgTokenID=null, $_tournamentID=null, $_teamGroupID=null, $_teamGroupTokenID=null, $_gameTypeID=null, $_genderCategoryID=null, $_keyword=null, $_offset=0, $_limit=10 ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("SportGameTeamGroup gmGrpMbr") 
				->innerJoin("gmGrpMbr.SportGameGroup gmGrp on gmGrpMbr.sport_game_group_id = gmGrp.id ") 
				->innerJoin("gmGrpMbr.Team tmPrt on gmGrpMbr.team_id = tmPrt.id ") 
				->innerJoin("gmGrp.Tournament trnmt on gmGrp.tournament_id = trnmt.id ")  
				->innerJoin("gmGrp.GameGroupType grpTyp on gmGrp.game_group_type_id = grpTyp.id ")  
				->innerJoin("gmGrp.SportGame sprtGm on gmGrp.sport_game_id = sprtGm.id ") 
				->innerJoin("sprtGm.GameCategory gmCat on sprtGm.sport_game_category_id = gmCat.id ")  
				->innerJoin("trnmt.Organization org on trnmt.org_id = org.id ")  
				->offset($_offset)
				->limit($_limit) 
				->orderBy("gmGrpMbr.id DESC")
				->where("gmGrpMbr.id IS NOT NULL");
				if(!is_null($_orgID)) $_qry = $_qry->addWhere("trnmt.org_id = ? AND trnmt.org_token_id = ? ", array($_orgID, $_orgTokenID)); 
				if(!is_null($_teamGroupID)) $_qry = $_qry->addWhere("gmGrp.id = ? AND gmGrp.token_id = ? ", array($_teamGroupID, $_teamGroupTokenID)); 
				if(!is_null($_sportGameID)) $_qry = $_qry->addWhere("sprtGm.id = ?", $_sportGameID);    
				if(!is_null($_tournamentID)) $_qry = $_qry->addWhere("trnmt.id = ?", $_tournamentID);    
				if(!is_null($_genderCategoryID)) $_qry = $_qry->addWhere("gmGrp.gender_category_id = ?", $_genderCategoryID);    
				//if(!is_null($_gameTypeID)) $_qry = $_qry->addWhere("gmGrp.game_group_type_id = ?", $_gameTypeID);  
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("gmGrp.group_name LIKE ? OR sprtGm.name LIKE ? OR gmGrp.description LIKE ?", array( $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	//
   public static function processAll ( $_orgID=null, $_orgTokenID=null, $_tournamentID=null, $_gameTypeID=null, $_genderCategoryID=null, $_groupID=null, $_keyword=null ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("SportGameTeamGroup gmGrpMbr") 
				->innerJoin("gmGrpMbr.SportGameGroup gmGrp on gmGrpMbr.sport_game_group_id = gmGrp.id ") 
				->innerJoin("gmGrpMbr.Team tmPrt on gmGrpMbr.team_id = tmPrt.id ") 
				->innerJoin("gmGrp.Tournament trnmt on gmGrp.tournament_id = trnmt.id ")  
				->innerJoin("gmGrp.GameGroupType grpTyp on gmGrp.game_group_type_id = grpTyp.id ")  
				->innerJoin("gmGrp.SportGame sprtGm on gmGrp.sport_game_id = sprtGm.id ") 
				->innerJoin("sprtGm.GameCategory gmCat on sprtGm.sport_game_category_id = gmCat.id ")  
				->innerJoin("trnmt.Organization org on trnmt.org_id = org.id ")   
				->orderBy("gmGrpMbr.id DESC")
				->where("gmGrpMbr.id IS NOT NULL");
				if(!is_null($_orgID)) $_qry = $_qry->addWhere("trnmt.org_id = ? AND trnmt.org_token_id = ? ", array($_orgID, $_orgTokenID));
				if(!is_null($_tournamentID)) $_qry = $_qry->addWhere("gmGrp.active_flag = ?", $_tournamentID);    
				if(!is_null($_gameTypeID)) $_qry = $_qry->addWhere("gmGrp.sport_game_id = ?", $_gameTypeID);    
				if(!is_null($_genderCategoryID)) $_qry = $_qry->addWhere("gmGrp.gender_category_id = ?", $_genderCategoryID);    
				if(!is_null($_groupID)) $_qry = $_qry->addWhere("gmGrp.game_group_type_id = ?", $_groupID);    
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("gmGrp.group_name LIKE ? OR sprtGm.name LIKE ? OR gmGrp.description LIKE ?", array( $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 


		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	//
   public static function processCandidates (  $_orgID=null, $_orgTokenID=null, $_tournamentID=null, $_teamGroupID=null, $_teamGroupTokenID=null, $_gameTypeID=null, $_genderCategoryID=null, $_groupID=null, $_keyword=null ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("SportGameTeamGroup gmGrpMbr") 
				->innerJoin("gmGrpMbr.SportGameGroup gmGrp on gmGrpMbr.sport_game_group_id = gmGrp.id ") 
				->innerJoin("gmGrpMbr.Team tmPrt on gmGrpMbr.team_id = tmPrt.id ") 
				->innerJoin("gmGrp.Tournament trnmt on gmGrp.tournament_id = trnmt.id ")  
				->innerJoin("gmGrp.GameGroupType grpTyp on gmGrp.game_group_type_id = grpTyp.id ")  
				->innerJoin("gmGrp.SportGame sprtGm on gmGrp.sport_game_id = sprtGm.id ") 
				->innerJoin("sprtGm.GameCategory gmCat on sprtGm.sport_game_category_id = gmCat.id ")  
				->innerJoin("trnmt.Organization org on trnmt.org_id = org.id ")   
				->orderBy("gmGrp.id ASC")
				->where("gmGrp.id IS NOT NULL");
				if(!is_null($_orgID)) $_qry = $_qry->addWhere("trnmt.org_id = ? AND trnmt.org_token_id = ? ", array($_orgID, $_orgTokenID));
				if(!is_null($_teamGroupID)) $_qry = $_qry->addWhere("gmGrp.id = ? AND gmGrp.token_id = ? ", array($_teamGroupID, $_teamGroupTokenID)); 
				if(!is_null($_tournamentID)) $_qry = $_qry->addWhere("gmGrp.active_flag = ?", $_tournamentID);    
				if(!is_null($_gameTypeID)) $_qry = $_qry->addWhere("gmGrp.sport_game_id = ?", $_gameTypeID);    
				if(!is_null($_genderCategoryID)) $_qry = $_qry->addWhere("gmGrp.gender_category_id = ?", $_genderCategoryID);    
				if(!is_null($_groupID)) $_qry = $_qry->addWhere("gmGrp.game_group_type_id = ?", $_groupID);    
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("gmGrp.group_name LIKE ? OR sprtGm.name LIKE ? OR gmGrp.description LIKE ?", array( $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 


		return ( count($_qry) <= 0 ? null:$_qry );  
		 
	}
	//
   public static function processCandidateParticipants ( $_orgID=null, $_orgTokenID=null, $_tournamentID=null, $_teamGroupID=null, $_teamGroupTokenID=null, $_genderCategoryID=null, $_groupID=null) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("SportGameTeamGroup gmGrpMbr") 
				->innerJoin("gmGrpMbr.SportGameGroup gmGrp on gmGrpMbr.sport_game_group_id = gmGrp.id ") 
				->innerJoin("gmGrpMbr.Team tmPrt on gmGrpMbr.team_id = tmPrt.id ") 
				->innerJoin("gmGrp.Tournament trnmt on gmGrp.tournament_id = trnmt.id ")  
				->innerJoin("gmGrp.GameGroupType grpTyp on gmGrp.game_group_type_id = grpTyp.id ")  
				->innerJoin("gmGrp.SportGame sprtGm on gmGrp.sport_game_id = sprtGm.id ") 
				->innerJoin("sprtGm.GameCategory gmCat on sprtGm.sport_game_category_id = gmCat.id ")  
				->innerJoin("trnmt.Organization org on trnmt.org_id = org.id ")   
				->orderBy("gmGrp.id ASC")
				->where("gmGrp.id IS NOT NULL");
				if(!is_null($_orgID)) $_qry = $_qry->addWhere("trnmt.org_id = ? AND trnmt.org_token_id = ? ", array($_orgID, $_orgTokenID));
				if(!is_null($_teamGroupID)) $_qry = $_qry->addWhere("gmGrp.id = ? AND gmGrp.token_id = ? ", array($_teamGroupID, $_teamGroupTokenID)); 
				if(!is_null($_tournamentID)) $_qry = $_qry->addWhere("trnmt.id = ?", $_tournamentID);    
				if(!is_null($_gameTypeID)) $_qry = $_qry->addWhere("gmGrp.sport_game_id = ?", $_gameTypeID);    
				if(!is_null($_genderCategoryID)) $_qry = $_qry->addWhere("gmGrp.gender_category_id = ?", $_genderCategoryID);    
				if(!is_null($_groupID)) $_qry = $_qry->addWhere("gmGrp.game_group_type_id = ?", $_groupID);  
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 


		return ( count($_qry) <= 0 ? null:$_qry );  
		 
	}
	// process list selection function 
   public static function processCandidateMemberTeams ( $_orgID=null, $_tournamentID=null, $_teamGroupID=null, $_teamID=null, $_teamTokenID=null, $_sportGameID=null, $_genderCategoryID=null, $_groupID=null, $_keyword=null, $_exclusion=null, $_offset=0, $_limit=10 ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("SportGameTeamGroup gmGrpMbr") 
				->innerJoin("gmGrpMbr.SportGameGroup gmGrp on gmGrpMbr.sport_game_group_id = gmGrp.id ") 
				->innerJoin("gmGrpMbr.Team tmPrt on gmGrpMbr.team_id = tmPrt.id ") 
				->innerJoin("gmGrp.Tournament trnmt on gmGrp.tournament_id = trnmt.id ")  
				->innerJoin("gmGrp.GameGroupType grpTyp on gmGrp.game_group_type_id = grpTyp.id ")  
				->innerJoin("gmGrp.SportGame sprtGm on gmGrp.sport_game_id = sprtGm.id ") 
				->innerJoin("sprtGm.GameCategory gmCat on sprtGm.sport_game_category_id = gmCat.id ")  
				->innerJoin("trnmt.Organization org on trnmt.org_id = org.id ")  
				->offset($_offset)
				->limit($_limit) 
				->orderBy("gmGrpMbr.id DESC")
				->where("gmGrpMbr.id IS NOT NULL");
				if(!is_null($_teamID)) $_qry = $_qry->addWhere("tmPrt.id = ? AND tmPrt.token_id = ? ", array($_teamID, $_teamTokenID));
				if(!is_null($_orgID)) $_qry = $_qry->addWhere("org.id = ?", $_orgID);    
				if(!is_null($_sportGameID)) $_qry = $_qry->addWhere("sprtGm.id = ?", $_sportGameID);    
				if(!is_null($_teamGroupID)) $_qry = $_qry->addWhere("gmGrp.id = ?", $_teamGroupID);    
				if(!is_null($_tournamentID)) $_qry = $_qry->addWhere("trnmt.id = ?", $_tournamentID);    
				if(!is_null($_genderCategoryID)) $_qry = $_qry->addWhere("gmGrp.gender_category_id = ?", $_genderCategoryID);    
				if(!is_null($_groupID)) $_qry = $_qry->addWhere("gmGrp.game_group_type_id = ?", $_groupID);      
				if(! is_null($_exclusion)) $_qry = $_qry->andWhereNotIn("gmGrpMbr.id ", $_exclusion );     
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("gmGrp.group_name LIKE ? OR sprtGm.name LIKE ? OR gmGrp.description LIKE ?", array( $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	// process list selection function 
   public static function processCandidateParticipantTeams ( $_orgID=null, $_tournamentID=null, $_sportGameGroupID=null, $_sportGameGroupTokenID=null, $_sportGameID=null, $_keyword=null, $_exclusion=null, $_offset=0, $_limit=10 ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("SportGameTeamGroup gmGrpMbr") 
				->innerJoin("gmGrpMbr.SportGameGroup gmGrp on gmGrpMbr.sport_game_group_id = gmGrp.id ") 
				->innerJoin("gmGrpMbr.Team tmPrt on gmGrpMbr.team_id = tmPrt.id ") 
				->innerJoin("gmGrp.Tournament trnmt on gmGrp.tournament_id = trnmt.id ")  
				->innerJoin("gmGrp.GameGroupType grpTyp on gmGrp.game_group_type_id = grpTyp.id ")  
				->innerJoin("gmGrp.SportGame sprtGm on gmGrp.sport_game_id = sprtGm.id ") 
				->innerJoin("sprtGm.GameCategory gmCat on sprtGm.sport_game_category_id = gmCat.id ")  
				->innerJoin("trnmt.Organization org on trnmt.org_id = org.id ")  
				->offset($_offset)
				->limit($_limit) 
				->orderBy("gmGrpMbr.id DESC")
				->where("gmGrpMbr.id IS NOT NULL");
				if(!is_null($_sportGameGroupID)) $_qry = $_qry->addWhere("gmGrp.id = ? AND gmGrp.token_id = ? ", array($_sportGameGroupID, $_sportGameGroupTokenID));
				if(!is_null($_orgID)) $_qry = $_qry->addWhere("org.id = ?", $_orgID);       
				if(!is_null($_tournamentID)) $_qry = $_qry->addWhere("trnmt.id = ?", $_tournamentID); 
				if(!is_null($_sportGameID)) $_qry = $_qry->addWhere("sprtGm.id = ?", $_sportGameID);    
				if(! is_null($_exclusion)) $_qry = $_qry->andWhereNotIn("gmGrpMbr.id ", $_exclusion );     
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("gmGrp.group_name LIKE ? OR sprtGm.name LIKE ? OR gmGrp.description LIKE ?", array( $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	//
	public static function processObject ( $_orgID=null, $_orgTokenID=null, $_groupID, $_tokenID ) 
	{
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("SportGameTeamGroup gmGrpMbr") 
				->innerJoin("gmGrpMbr.SportGameGroup gmGrp on gmGrpMbr.tournament_id = gmGrp.id ") 
				->innerJoin("gmGrp.Tournament trnmt on gmGrp.tournament_id = trnmt.id ") 
				->innerJoin("gmGrp.GameGroupType grpTyp on gmGrp.game_group_type_id = grpTyp.id ")  
				->innerJoin("gmGrp.SportGame sprtGm on gmGrp.sport_game_id = sprtGm.id ") 
				->innerJoin("sprtGm.GameCategory gmCat on sprtGm.sport_game_category_id = gmCat.id ")  
				->innerJoin("trnmt.Organization org on trnmt.org_id = org.id ")     
				->where("gmGrp.id = ? AND gmGrp.token_id = ? ", array($_groupID, $_tokenID ));
				if(!is_null($_orgID)) $_qry = $_qry->andWhere("trnmt.org_id = ? AND trnmt.org_token_id = ?", array($_orgID, $_orgTokenID));
				$_qry = $_qry->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD); 
			
		return (! $_qry ? null : $_qry ); 	
	}  
	//
   public static function makeObject ( $_orgID=null, $_matchID, $_tokenID  ) 
	{
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("SportGameTeamGroup gmGrp") 
				->innerJoin("gmGrp.Tournament trnmt on gmGrp.tournament_id = trnmt.id ") 
				->innerJoin("gmGrp.GameGroupType grpTyp on gmGrp.game_group_type_id = grpTyp.id ")  
				->innerJoin("gmGrp.SportGame sprtGm on gmGrp.sport_game_id = sprtGm.id ") 
				->innerJoin("sprtGm.GameCategory gmCat on sprtGm.sport_game_category_id = gmCat.id ")  
				->innerJoin("trnmt.Organization org on trnmt.org_id = org.id ")     
				->where("gmGrp.id = ? AND gmGrp.token_id = ? ", array($_matchID, $_tokenID ));
				//if(!is_null($_orgID)) $_qry = $_qry->andWhere("prt.org_id = ? AND prt.org_token_id = ?", array($_orgID, $_orgTokenID));
				$_qry = $_qry->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD); 
			
		return (! $_qry ? null : $_qry ); 	
	}  
	//
   public static function makeCandidateObject ( $_orgID=null, $_activeFlag ) 
	{
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("SportGameTeamGroup gmGrp") 
				->innerJoin("gmGrp.Tournament trnmt on gmGrp.tournament_id = trnmt.id ") 
				->innerJoin("gmGrp.GameGroupType grpTyp on gmGrp.game_group_type_id = grpTyp.id ")  
				->innerJoin("gmGrp.SportGame sprtGm on gmGrp.sport_game_id = sprtGm.id ") 
				->innerJoin("sprtGm.GameCategory gmCat on sprtGm.sport_game_category_id = gmCat.id ")  
				->innerJoin("trnmt.Organization org on trnmt.org_id = org.id ")     
				->where("gmGrp.id IS NOT NULL");
				//if(!is_null($_orgID)) $_qry = $_qry->andWhere("prt.org_id = ? AND prt.org_token_id = ?", array($_orgID, $_orgTokenID));
				if(!is_null($_activeFlag)) $_qry = $_qry->andWhere("gmGrp.active_flag = ?", $_activeFlag);
				$_qry = $_qry->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD); 
			
		return (! $_qry ? null : $_qry ); 	
	}  
	 
	
	/*********************************************************
	********** Candidate selection process *******************
	**********************************************************/
	
	//
	public static function processCandidatePersonSelection ( ) 
   { 
		
	}  
	
	/*********************************************************
	********** Candidate filtering process *******************
	**********************************************************/
	
	public static function processRoleSelection ()
	{
		 
	}

}
