<?php

/**
 * TournamentTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TournamentTable extends PluginTournamentTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object TournamentTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Tournament');
    }
    
   //
	public static function processNew ( $_orgID, $_orgTokenID,  $_tournamentName, $_tournamentAlias, $_tournamentSeason, $_startDate, $_effectiveDate, $_endDate, $_status, $_description, $_userID, $_userTokenID  )
	{
		 $_flag = true;

			$_tournament = self::processSave ( $_orgID, $_orgTokenID,  $_tournamentName, $_tournamentAlias, $_tournamentSeason, $_startDate, $_effectiveDate, $_endDate, $_description );
		
		return $_tournament;
	}
	//
	public static function processCreate ( )
	{
		
	} 
	public static function processSave ( $_orgID, $_orgTokenID,  $_tournamentName, $_tournamentAlias, $_tournamentSeason, $_startDate, $_effectiveDate, $_endDate, $_description )
	{
		//try {
			//if(!$_orgID || !$_name) return false;
    	
			$_token = trim($_orgTokenID).trim($_tournamentName).trim($_tournamentAlias).trim($_startDate).rand('11111', '99999'); 
			$_startDate = date('m/d/Y', time());
			$_nw = new Tournament (); 
			$_nw->token_id = sha1(md5(trim($_token))); 
			$_nw->org_id = trim($_orgID); 
			$_nw->org_token_id = sha1(md5(trim($_orgTokenID)));  
			$_nw->name = trim($_tournamentName); 
			$_nw->alias = trim($_tournamentAlias); 
			$_nw->season = trim($_tournamentSeason);  
			$_nw->start_date = trim($_startDate);  
			$_nw->effective_date = trim($_effectiveDate);  
			$_nw->end_date = trim($_endDate);  
			$_nw->status = trim(TournamentCore::$_PENDING);   
			$_nw->description = SystemCore::processDescription ( trim($_tournamentName), trim($_description) );  
			$_nw->save(); 
			
			return $_nw; 
		//} catch ( Exception $e) {
	    //  return false; 
		//}
	} 
	public static function processEdit ( )
	{
		
	} 
	//
	public static function processUpdate ( )
	{
		   
	} 
	//
	public static function processDelete( ) 
   {	
		 
	}
	//
	public static function appendPartialQueryFields ( ) 
	{		
		 
	}
	//
	public static function appendCandidateQueryFields ( ) 
	{		
		 
	}
	public static function appendQueryFields ( ) 
	{		
		 $_queryFileds = "trnmnt.id, trnmnt.name as tournamentName, trnmnt.alias as tournamentAlias, trnmnt.season as tournamentSeason, trnmnt.default_flag as defaultFlag, trnmnt.active_flag as activeFlag, trnmnt.start_date as startDate, trnmnt.end_date as endDate,
		 
		";	
		return $_queryFileds; 
	}
	//
  // process list selection function 
   public static function processSelection ( $_orgID=null, $_orgTokenID=null, $_season, $_activeFlag, $_keyword=null, $_offset=0, $_limit=10 ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("Tournament trnmnt")  
				->innerJoin("trnmnt.Organization org on trnmnt.org_id = org.id ")   
				->offset($_offset)
				->limit($_limit) 
				->orderBy("trnmnt.id ASC")
				->where("trnmnt.id IS NOT NULL");
				if(!is_null($_orgID)) $_qry = $_qry->addWhere("trnmnt.org_id = ? AND trnmnt.org_token_id = ? ", array($_orgID, $_orgTokenID));
				if(!is_null($_activeFlag)) $_qry = $_qry->addWhere("trnmnt.active_flag = ?", $_activeFlag);    
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("trnmnt.name LIKE ? OR trnmnt.alias LIKE ? OR trnmnt.description LIKE ?", array( $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	//
   public static function processAll ($_orgID=null, $_orgTokenID=null, $_keyword=null ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("GameCategory trnmnt")  
				->innerJoin("trnmnt.Organization org on trnmnt.org_id = org.id ")   
				->orderBy("trnmnt.id ASC")
				->where("trnmnt.id IS NOT NULL");
				if(!is_null($_orgID)) $_qry = $_qry->addWhere("trnmnt.org_id = ? AND trnmnt.org_token_id = ? ", array($_orgID, $_orgTokenID));
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("trnmnt.category_name LIKE ? OR trnmnt.alias LIKE ? OR trnmnt.description LIKE ?", array( $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	 
	// process list selection function 
   public static function processCandidates ( $_orgID=null, $_orgTokenID=null, $_exclusion=null, $_keyword=null, $_offset=0, $_limit=10 ) 
   {
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("GameCategory trnmnt")  
				->innerJoin("trnmnt.Organization org on trnmnt.org_id = org.id ")   
				->offset($_offset)
				->limit($_limit) 
				->orderBy("trnmnt.id ASC")
				->where("trnmnt.id IS NOT NULL");
				if(!is_null($_orgID)) $_qry = $_qry->addWhere("trnmnt.org_id = ? AND trnmnt.org_token_id = ? ", array($_orgID, $_orgTokenID));     
				if(! is_null($_exclusion)) $_qry = $_qry->andWhereNotIn("trnmnt.id ", $_exclusion ); 
				if(!is_null($_keyword) )
					if(strcmp(trim($_keyword), "") != 0 )
						$_qry = $_qry->andWhere("trnmnt.category_name LIKE ? OR trnmnt.alias LIKE ? OR trnmnt.description LIKE ?", array( $_keyword, $_keyword, $_keyword));
				
			$_qry = $_qry->execute(array(), Doctrine_Core::HYDRATE_RECORD); 

		return ( count($_qry) <= 0 ? null:$_qry );  
	}
	//
   public static function processCandidateSelection ( ) 
   {
		 
	}
	//
  public static function processObject ( $_orgID=null, $_orgTokenID=null, $_tournamentID, $_tokenID ) 
	{
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("Tournament trnmnt") 
				->innerJoin("trnmnt.Organization org on trnmnt.org_id = org.id ")     
				->where("trnmnt.id = ? AND trnmnt.token_id = ? ", array($_tournamentID, $_tokenID ));
				//if(!is_null($_orgID)) $_qry = $_qry->andWhere("prt.org_id = ? AND prt.org_token_id = ?", array($_orgID, $_orgTokenID));
				$_qry = $_qry->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD); 
			
		return (! $_qry ? null : $_qry ); 	
	}  
	//
	public static function makeActiveObject ( $_orgID=null, $_activeFlag ) 
	{
		$_qry = Doctrine_Query::create()
				->select(self::appendQueryFields())
				->from("Tournament trnmnt") 
				->innerJoin("trnmnt.Organization org on trnmnt.org_id = org.id ")     
				->where("trnmnt.id IS NOT NULL");
				if(!is_null($_orgID)) $_qry = $_qry->andWhere("trnmnt.org_id = ?", $_orgID);
				if(!is_null($_activeFlag)) $_qry = $_qry->andWhere("trnmnt.active_flag = ?", $_activeFlag);
				$_qry = $_qry->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD); 
			
		return (! $_qry ? null : $_qry ); 	
	}  
	//
   public static function makeObject ( ) 
   {
		 
	} 
	 
	public static function makeCandidateObject ( $_activeFlag ) 
	{
			$_qry = Doctrine_Query::create()
					->select(self::appendQueryFields())
				->from("Tournament trnmnt") 
				->innerJoin("trnmnt.Organization org on trnmnt.org_id = org.id ")     
				->where("trnmnt.id IS NOT NULL");
				if(!is_null($_activeFlag)) $_qry = $_qry->andWhere("trnmnt.active_flag = ?", $_activeFlag);
				$_qry = $_qry->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD); 
			
		return (! $_qry ? null : $_qry ); 	
	}  
	
}
